{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/login.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"primeng/button\";\nexport class LoginComponent {\n  constructor(loginService, formBuilder, router) {\n    this.loginService = loginService;\n    this.formBuilder = formBuilder;\n    this.router = router;\n  }\n\n  newLogin() {\n    this.loginForm = this.formBuilder.group({\n      userName: [\"\", Validators.required],\n      password: [\"\", Validators.required]\n    });\n  }\n\n  ngOnInit() {\n    this.newLogin();\n  }\n\n  onSubmit() {\n    if (this.loginForm.valid) {\n      let model = Object.assign({}, this.loginForm.value);\n      this.loginService.login(model);\n\n      if (this.loginService.isLoggedIn()) {\n        this.router.navigateByUrl(\"/dashboard\");\n      }\n    }\n  }\n\n}\n\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.LoginService), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.Router));\n};\n\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  decls: 7,\n  vars: 1,\n  consts: [[1, \"wrapper\"], [1, \"form-signin\", 3, \"formGroup\"], [1, \"form-signin-heading\"], [\"type\", \"text\", \"name\", \"username\", \"formControlName\", \"userName\", \"placeholder\", \"Username\", \"required\", \"\", \"autofocus\", \"\", 1, \"form-control\"], [\"type\", \"password\", \"placeholder\", \"Password\", \"name\", \"password\", \"placeholder\", \"Password\", \"required\", \"\", 1, \"form-control\"], [\"pButton\", \"\", \"type\", \"button\", \"label\", \"Login\", 3, \"click\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelementStart(1, \"form\", 1);\n      i0.ɵɵelementStart(2, \"h2\", 2);\n      i0.ɵɵtext(3, \"Please login\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(4, \"input\", 3);\n      i0.ɵɵelement(5, \"input\", 4);\n      i0.ɵɵelementStart(6, \"button\", 5);\n      i0.ɵɵlistener(\"click\", function LoginComponent_Template_button_click_6_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n    }\n  },\n  directives: [i2.ɵNgNoValidate, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.DefaultValueAccessor, i2.NgControlStatus, i2.FormControlName, i2.RequiredValidator, i4.ButtonDirective],\n  styles: [\"var[_ngcontent-%COMP%]   resource[_ngcontent-%COMP%];\\n (()[_ngcontent-%COMP%]   =[_ngcontent-%COMP%] >  { // webpackBootstrap\\n \\tvar __webpack_modules__ = ({\\n\\n 86:\\n\\n (() => {\\n\\nthrow new Error(\\\"Module build failed (from ./node_modules/postcss-loader/dist/cjs.js):\\\\nError: Failed to find 'bourbon'\\\\n  in [\\\\n    C:\\\\\\\\smart\\\\\\\\app\\\\\\\\src\\\\\\\\app\\\\\\\\login\\\\n  ]\\\\n    at C:\\\\\\\\smart\\\\\\\\app\\\\\\\\node_modules\\\\\\\\postcss-import\\\\\\\\lib\\\\\\\\resolve-id.js:35:13\\\\n    at async Promise.all (index 0)\\\\n    at async LazyResult.runAsync (C:\\\\\\\\smart\\\\\\\\app\\\\\\\\node_modules\\\\\\\\postcss\\\\\\\\lib\\\\\\\\lazy-result.js:394:11)\\\\n    at async Object.loader (C:\\\\\\\\smart\\\\\\\\app\\\\\\\\node_modules\\\\\\\\postcss-loader\\\\\\\\dist\\\\\\\\index.js:97:14)\\\");\\n\\n })\\n\\n \\t});\\n\\n \\t\\n \\t// startup\\n \\t// Load entry module and return exports\\n \\t// This entry module doesn't tell about it's top-level declarations so it can't be inlined\\n \\tvar __webpack_exports__ = {};\\n \\t__webpack_modules__[86]();\\n \\tresource = __webpack_exports__;\\n \\t\\n })()\\n;\\n/*# sourceMappingURL=login.component.css.map*/\"]\n});","map":{"version":3,"sources":["C:\\smart\\app\\src\\app\\login\\login.component.ts","C:\\smart\\app\\src\\app\\login\\login.component.html"],"names":[],"mappings":"AACA,SAAyC,UAAzC,QAA2D,gBAA3D;;;;;;AAYA,OAAM,MAAO,cAAP,CAAqB;AAEzB,EAAA,WAAA,CAAoB,YAApB,EAAwD,WAAxD,EAA0F,MAA1F,EAAwG;AAApF,SAAA,YAAA,GAAA,YAAA;AAAoC,SAAA,WAAA,GAAA,WAAA;AAAkC,SAAA,MAAA,GAAA,MAAA;AAAmB;;AAG7G,EAAA,QAAQ,GAAA;AACN,SAAK,SAAL,GAAiB,KAAK,WAAL,CAAiB,KAAjB,CAAuB;AACtC,MAAA,QAAQ,EAAE,CAAC,EAAD,EAAK,UAAU,CAAC,QAAhB,CAD4B;AAEtC,MAAA,QAAQ,EAAE,CAAC,EAAD,EAAK,UAAU,CAAC,QAAhB;AAF4B,KAAvB,CAAjB;AAID;;AACD,EAAA,QAAQ,GAAA;AACN,SAAK,QAAL;AACD;;AACD,EAAA,QAAQ,GAAA;AACN,QAAI,KAAK,SAAL,CAAe,KAAnB,EAAyB;AACvB,UAAI,KAAK,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,KAAK,SAAL,CAAe,KAAjC,CAAZ;AACA,WAAK,YAAL,CAAkB,KAAlB,CAAwB,KAAxB;;AACA,UAAG,KAAK,YAAL,CAAkB,UAAlB,EAAH,EAAkC;AAChC,aAAK,MAAL,CAAY,aAAZ,CAA0B,YAA1B;AACD;AACF;AAGF;;AAxBwB;;;mBAAd,c,EAAc,EAAA,CAAA,iBAAA,CAAA,EAAA,CAAA,YAAA,C,EAAA,EAAA,CAAA,iBAAA,CAAA,EAAA,CAAA,WAAA,C,EAAA,EAAA,CAAA,iBAAA,CAAA,EAAA,CAAA,MAAA,C;AAAA,C;;;QAAd,c;AAAc,EAAA,SAAA,EAAA,CAAA,CAAA,WAAA,CAAA,C;AAAA,EAAA,KAAA,EAAA,C;AAAA,EAAA,IAAA,EAAA,C;AAAA,EAAA,MAAA,EAAA,CAAA,CAAA,CAAA,EAAA,SAAA,CAAA,EAAA,CAAA,CAAA,EAAA,aAAA,EAAA,CAAA,EAAA,WAAA,CAAA,EAAA,CAAA,CAAA,EAAA,qBAAA,CAAA,EAAA,CAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,UAAA,EAAA,iBAAA,EAAA,UAAA,EAAA,aAAA,EAAA,UAAA,EAAA,UAAA,EAAA,EAAA,EAAA,WAAA,EAAA,EAAA,EAAA,CAAA,EAAA,cAAA,CAAA,EAAA,CAAA,MAAA,EAAA,UAAA,EAAA,aAAA,EAAA,UAAA,EAAA,MAAA,EAAA,UAAA,EAAA,aAAA,EAAA,UAAA,EAAA,UAAA,EAAA,EAAA,EAAA,CAAA,EAAA,cAAA,CAAA,EAAA,CAAA,SAAA,EAAA,EAAA,EAAA,MAAA,EAAA,QAAA,EAAA,OAAA,EAAA,OAAA,EAAA,CAAA,EAAA,OAAA,CAAA,C;AAAA,EAAA,QAAA,EAAA,SAAA,uBAAA,CAAA,EAAA,EAAA,GAAA,EAAA;AAAA,QAAA,EAAA,GAAA,CAAA,EAAA;ACM3B,MAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,KAAA,EAAA,CAAA;AACI,MAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,MAAA,EAAA,CAAA;AACE,MAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,IAAA,EAAA,CAAA;AAAgC,MAAA,EAAA,CAAA,MAAA,CAAA,CAAA,EAAA,cAAA;AAAY,MAAA,EAAA,CAAA,YAAA;AAC5C,MAAA,EAAA,CAAA,SAAA,CAAA,CAAA,EAAA,OAAA,EAAA,CAAA;AACA,MAAA,EAAA,CAAA,SAAA,CAAA,CAAA,EAAA,OAAA,EAAA,CAAA;AACA,MAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,QAAA,EAAA,CAAA;AAA4C,MAAA,EAAA,CAAA,UAAA,CAAA,OAAA,EAAA,SAAA,+CAAA,GAAA;AAAA,eAAU,GAAA,CAAA,QAAA,EAAV;AAAoB,OAApB;AAAuB,MAAA,EAAA,CAAA,YAAA;AACrE,MAAA,EAAA,CAAA,YAAA;AACJ,MAAA,EAAA,CAAA,YAAA;;;;AAN8B,MAAA,EAAA,CAAA,SAAA,CAAA,CAAA;AAAA,MAAA,EAAA,CAAA,UAAA,CAAA,WAAA,EAAA,GAAA,CAAA,SAAA","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, NgForm, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport {InputTextModule} from 'primeng/inputtext';\nimport {PasswordModule} from 'primeng/password';\nimport { LoginService } from '../services/login.service';\nimport { User } from './user';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  constructor(private loginService: LoginService, private formBuilder: FormBuilder, private router: Router) { }\n  loginForm!: FormGroup;\n\n  newLogin(){\n    this.loginForm = this.formBuilder.group({\n      userName: [\"\", Validators.required],\n      password: [\"\", Validators.required]\n    })\n  }\n  ngOnInit(): void {\n    this.newLogin();\n  }\n  onSubmit(){\n    if (this.loginForm.valid){\n      let model = Object.assign({}, this.loginForm.value)\n      this.loginService.login(model)\n      if(this.loginService.isLoggedIn()){\n        this.router.navigateByUrl(\"/dashboard\")\n      }\n    }\n\n    \n  }\n}\n\n","<!-- <body>\n    <form [formGroup]=\"loginForm\">\n        <div class=\"center\">\n            <div class = \"title\">\n                <h1>Login Page</h1>\n            </div><br><br>\n            <div class=\"message1\">\n                <input type=\"text\" formControlName=\"userName\" pInputText placeholder=\"Username\" name=\"userName\" id=\"userName\" required autofocus><br><br>\n            <p-message *ngIf=\"loginForm.get('userName')!.hasError('required') && loginForm.get('userName')!.dirty\" severity=\"error\" text=\"Username is required!\"></p-message><br>\n            </div><br>\n            <div class=\"message2\">\n                <input type=\"password\" pPassword placeholder=\"Password\" formControlName=\"password\" name = \"password\" id=\"password\" required /> <br><br>  \n            <p-message *ngIf=\"loginForm.get('password')!.hasError('required') && loginForm.get('password')!.dirty\" severity=\"error\" text=\"Password is required!\"></p-message><br>\n            </div><br>\n            <button pButton type=\"button\" label=\"Login\" (click) =\"onSubmit()\" ></button>\n        </div>\n        \n    </form>\n</body> -->\n<div class=\"wrapper\">\n    <form class=\"form-signin\" [formGroup]=\"loginForm\">       \n      <h2 class=\"form-signin-heading\">Please login</h2>\n      <input type=\"text\" class=\"form-control\" name=\"username\" formControlName=\"userName\" placeholder=\"Username\" required=\"\" autofocus=\"\" />\n      <input type=\"password\" class=\"form-control\" placeholder=\"Password\" name=\"password\" placeholder=\"Password\" required=\"\"/>      \n      <button pButton type=\"button\" label=\"Login\" (click) =\"onSubmit()\" ></button> \n    </form>\n</div>"],"sourceRoot":""},"metadata":{},"sourceType":"module"}